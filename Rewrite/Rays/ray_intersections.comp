#include "./ray_hit.comp"
#include "./ray.comp"

Ray TransformRay(Ray ray, Transform transform)
{
    vec4 far = vec4(ray.origin + ray.direction);
    vec4 origin = transform * vec4(ray.origin);
    vec4 direction = normalize(transform * far - origin);
    return createRay(origin.xyz, direction.xyz);
}

Impact TransformImpact(Impact impact, mat4 transform)
{
    vec4 far = vec4(impact.point + impact.normal);
    vec4 point = transform * vec4(impact.point);
    vec4 normal = normalize(transform * far - point);
    return createImpact(point, normal);
}

#include "./Intersections/sphere.comp"
#include "./Intersections/plane.comp"

#define INTERSECTS(ray, geometry, rayHit)\
    Ray t_ray = TransformRay(ray, geometry.transform.worldToLocal);\
    Intersects(geometry, t_ray, out rayHit);\
    rayHit.impact = TransformImpact(rayHit.impact, geometry.transform.localToWorld);