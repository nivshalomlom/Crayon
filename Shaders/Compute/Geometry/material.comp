const float M_PI = 3.14159265358979323846264338327950288;
const float EPS = 0.001;

struct Material
{
    vec4 emissionColor;
    vec4 baseColor;
    
    float emissionStrength;
    float reflectance;
    float roughness;
    float metallic;
};

vec3 Emission(Material material)
{
    return material.emissionStrength * material.emissionColor.rgb;
}

float Vec3Max(vec3 v) 
{
    return max(v.x, max(v.y, v.z));
}

struct BRDFPoint
{
    vec3 viewerDirection;
    vec3 lightDirection;
    vec3 normal;
};

BRDFPoint CreateBRDFPoint(vec3 viewerDirection, vec3 lightDirection, vec3 normal)
{
    BRDFPoint point;
    point.viewerDirection = viewerDirection;
    point.lightDirection = lightDirection;
    point.normal = normal;
    return point;
}

vec3 Fresnel(float HoV, vec3 f0) 
{
    float base = 1.0 - HoV;
    float base_2 = base * base;
    float base_5 = base_2 * base_2 * base;

    return f0 + (vec3(1.0) - f0) * base_5;
}

float Distribution(float HoN, float roughness)
{
    float alpha = roughness * roughness;
    float alpha_2 = alpha * alpha;
    
    float inner = HoN * HoN * (alpha_2 - 1.0) + 1.0;
    return alpha_2 / (M_PI * inner * inner);
}

float Geometry(float NoV, float roughness)
{
    float k = 0.5 * roughness * roughness;
    float lower = NoV * (1.0 - k) + k;
    return NoV / max(lower, EPS);
}

vec3 BRDF(BRDFPoint point, Material material)
{
    vec3 halfV = normalize(point.viewerDirection + point.lightDirection);
    vec3 rhoD = material.baseColor.xyz * (1.0 - material.metallic);
    vec3 f0 = vec3(0.16 * material.reflectance * material.reflectance);
    f0 = mix(f0, material.baseColor.xyz, material.metallic);

    float NoV = clamp(dot(point.viewerDirection, point.normal), EPS, 1.0);
    float NoL = clamp(dot(point.lightDirection, point.normal), EPS, 1.0);
    float HoV = clamp(dot(point.viewerDirection, halfV), EPS, 1.0);
    float HoN = clamp(dot(point.normal, halfV), EPS, 1.0);
    
    vec3 F = Fresnel(HoV, f0);
    float D = Distribution(HoN, material.roughness);
    float G = Geometry(NoV, material.roughness) * Geometry(NoL, material.roughness);
    
    vec3 specular = 0.25 * F * D * G / (NoV * NoL);
    vec3 diffuse = (rhoD * (vec3(1.0) - F)) / M_PI;

    return specular + diffuse;
}