const float M_PI = 3.14159265358979323846264338327950288;

struct Material
{
    vec4 emissionColor;
    vec4 baseColor;
    
    float emissionStrength;
    float reflectance;
    float roughness;
    float metallic;
};

/*

outgoingDirection - the direction from the reflection point to the eye
incomingDirection - the direction from the reflection point to the light source

*/

struct BRDFPoint
{
    vec3 incomingDirection;
    vec3 outgoingDirection;
    vec3 normal;
};

BRDFPoint createBRDFPoint(vec3 incomingDirection, vec3 outgoingDirection, vec3 normal)
{
    BRDFPoint point;
    point.incomingDirection = incomingDirection;
    point.outgoingDirection = outgoingDirection;
    point.normal = normal;
    return point;
}

vec3 Fresnel(float HoV, vec3 f0) 
{
    float raw = pow(1.0 - HoV, 5.0);
    vec3 inv = vec3(1.0) - f0;
    return f0 + inv * raw;
}

float Distribution(vec3 normal, vec3 halfV, float roughness)
{
    float NoH = clamp(dot(halfV, normal), 0.0, 1.0);
    float alpha_2 = pow(roughness, 4.0);

    float inner = pow(NoH, 2.0) * (alpha_2 - 1.0) + 1.0;
    return alpha_2 / (M_PI * pow(inner, 2.0));
}

float Geometry(float NoV, float roughness)
{
    float k = pow(roughness, 2.0) / 2.0;
    float lower = NoV * (1.0 - k) + k;
    return NoV / lower;
}

vec3 BRDF(BRDFPoint point, Material material)
{
    vec3 halfV = normalize(point.incomingDirection + point.outgoingDirection);
    vec3 rhoD = material.baseColor.xyz * (1.0 - material.metallic);
    vec3 f0 = vec3(0.16 * pow(material.reflectance, 2.0));
    f0 = mix(f0, material.baseColor.xyz, material.metallic);

    float NoV = clamp(dot(point.outgoingDirection, point.normal), 0.0, 1.0);
    float NoL = clamp(dot(point.incomingDirection, point.normal), 0.0, 1.0);
    float HoV = clamp(dot(point.outgoingDirection, halfV), 0.0, 1.0);
    float HoL = clamp(dot(point.incomingDirection, halfV), 0.0, 1.0);

    vec3 F = Fresnel(HoV, f0);
    float D = Distribution(point.normal, halfV, material.roughness);
    float G = Geometry(NoV, material.roughness) * Geometry(NoL, material.roughness);
    
    vec3 specular = (F * D * G) / (4.0 * max(NoV, 0.001) * max(NoL, 0.001));
    vec3 diffuse = rhoD * M_PI * (vec3(1.0) - F);

    return specular + diffuse;
}