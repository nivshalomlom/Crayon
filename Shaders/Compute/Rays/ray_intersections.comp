#include "../Reservoir/reservoir.comp"

Ray TransformRay(Ray ray, mat4 transform)
{
    vec4 far = vec4(ray.origin + ray.direction, 1.0);
    vec4 origin = transform * vec4(ray.origin, 1.0);
    vec4 direction = normalize(transform * far - origin);
    return CreateRay(origin.xyz, direction.xyz);
}

Impact TransformImpact(Impact impact, mat4 transform)
{
    vec4 far = vec4(impact.point + impact.normal, 1.0);
    vec4 point = transform * vec4(impact.point, 1.0);
    vec4 normal = normalize(transform * far - point);
    return CreateImpact(point.xyz, normal.xyz);
}

Ray CreateReflection(RayHit rayHit, inout uint state)
{
    return CreateRay(
        rayHit.impact.point,
        normalize(rayHit.impact.normal + RandomDirection(state))
    );
}

#include "./Intersections/sphere.comp"
#include "./Intersections/plane.comp"

#define ITERATE_GEOMERTY(array, ray, rayHit, closest)\
    for (int i = 0; i < spheres.length(); i++)\
    {\
        Ray t_ray = TransformRay(ray, array[i].transform.worldToLocal);\
        if (Intersects(array[i], t_ray, rayHit))\
        {\
            rayHit.impact = TransformImpact(rayHit.impact, array[i].transform.localToWorld);\
            float geometryDist = length(rayHit.impact.point - ray.origin);\
            \
            if (geometryDist < closestDist || closestDist < 0.0)\
            {\
                closestDist = geometryDist;\
                closest = rayHit;\
            }\
        }\
    }

bool FireRay(Ray ray, out RayHit hit)
{
    float closestDist = -1.0;
    RayHit temp;

    ITERATE_GEOMERTY(spheres, ray, temp, hit);
    ITERATE_GEOMERTY(planes, ray, temp, hit);

    return closestDist > 0.0;
}