#include "../Rays/ray_hit.comp"
#include "../Random/random.comp"

const uint ReservoirSize = 8;

struct Reservoir
{
    vec4 colors[ReservoirSize];
    float weights[ReservoirSize];
    float totalWeight;
    uint numItems;
};

Reservoir CreateReservoir()
{
    Reservoir reservoir;
    reservoir.totalWeight = 0.0;
    reservoir.numItems = 0;
    return reservoir;
}

void AddToReservoir(inout Reservoir reservoir, vec4 color, float weight, inout uint state)
{
    reservoir.totalWeight += weight;
    reservoir.numItems++;

    float ratio = weight / max(reservoir.totalWeight, EPS);
    for (int i = 0; i < ReservoirSize; i++)
    {
        float rand = RandomValue(state);
        if (reservoir.numItems == 1 || rand <= ratio)
        {
            reservoir.colors[i] = color;
            reservoir.weights[i] = weight;
        }
    }
}

vec4 GetReservoirValue(Reservoir reservoir)
{
    float avarageWeight = reservoir.totalWeight / reservoir.numItems;
    vec4 avarageSample = vec4(0.0);
    
    for (int i = 0; i < ReservoirSize; i++)
    {
        float correction = avarageWeight / reservoir.weights[i];
        avarageSample += reservoir.colors[i] * correction;
    }

    return avarageSample / ReservoirSize;
}