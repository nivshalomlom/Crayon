#include "../Random/random.comp"

struct Reservoir
{
    vec4 item;
    vec4 normalDepth;

    float itemWeight;
    float totalWeight;

    uint numItems;
};

Reservoir CreateReservoir()
{
    Reservoir reservoir;
    reservoir.totalWeight = 0.0;
    reservoir.numItems = 0;
    return reservoir;
}

void AddToReservoir(inout Reservoir reservoir, vec4 item, float itemWeight, inout uint state)
{
    reservoir.totalWeight += itemWeight;
    reservoir.numItems++;

    float ratio = itemWeight / max(reservoir.totalWeight, EPS);
    if (reservoir.numItems == 1 || RandomValue(state) <= ratio)
    {
        reservoir.item = item;
        reservoir.itemWeight = itemWeight;
    }
}

void MergeReservoirs(inout Reservoir source, Reservoir target, inout uint state)
{
    float totalWeight = source.totalWeight + target.totalWeight;
    float ratio = target.totalWeight / totalWeight;

    if (source.numItems == 0 || RandomValue(state) <= ratio)
    {
        source.item = target.item;
        source.itemWeight = target.itemWeight;
    }

    source.totalWeight = totalWeight;
    source.numItems += target.numItems;
}

vec4 GetReservoirValue(Reservoir reservoir)
{
    float averageWeight = reservoir.totalWeight / reservoir.numItems;
    float correction = averageWeight / reservoir.itemWeight;
    return reservoir.item * correction;
}