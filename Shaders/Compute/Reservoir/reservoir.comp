#include "../Random/random.comp"

struct Reservoir
{
    vec4 item;
    float itemWeight;
    float totalWeight;
    uint numItems;
};

Reservoir CreateReservoir()
{
    Reservoir reservoir;
    reservoir.totalWeight = 0.0;
    reservoir.numItems = 0;
    return reservoir;
}

float GetReservoirCorrectionWeight(Reservoir reservoir)
{
    return reservoir.totalWeight / (reservoir.itemWeight * reservoir.numItems);
}

vec4 GetReservoirValue(Reservoir reservoir)
{
    return reservoir.item * GetReservoirCorrectionWeight(reservoir);
}

void AddToReservoir(inout Reservoir reservoir, vec4 item, float weight, inout uint state)
{
    reservoir.totalWeight += weight;
    reservoir.numItems++;

    float ratio = weight / max(reservoir.totalWeight, EPS);
    if (reservoir.numItems == 1 || RandomValue(state) <= ratio)
    {
        reservoir.item = item;
        reservoir.itemWeight = weight;
    }
}

void MergeReservoirs(inout Reservoir into, Reservoir from, inout uint state)
{
    float weight = from.itemWeight * from.numItems * GetReservoirCorrectionWeight(from);
    if (weight <= EPS)
        return;

    AddToReservoir(
        into,
        from.item, 
        from.itemWeight * from.numItems * GetReservoirCorrectionWeight(from), 
        state
    );

    into.numItems += from.numItems - 1;
}