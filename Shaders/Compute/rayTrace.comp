#version 430 core

#include "./Rays/ray_intersections.comp"
#include "./Random/random.comp"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(rgba32F, binding = 0) uniform image2D renderTarget;

vec4 fireRay(Ray ray)
{
    float closestDist = -1.0;
    RayHit rayHit, closest;
    Ray t_ray;

    for (int i = 0; i < spheres.length(); i++)
    {
        t_ray = transformRay(ray, spheres[i].transform.worldToLocal);
        if (Intersects(spheres[i], t_ray, rayHit))
        {
            rayHit.impact = transformImpact(rayHit.impact, spheres[i].transform.localToWorld);
            float geometryDist = length(rayHit.impact.point - ray.origin);

            if (geometryDist < closestDist || closestDist < 0.0)
            {
                closestDist = geometryDist;
                closest = rayHit;
            }
        }
    }

    return closestDist < 0.0 ? vec4(0.0) : closest.material.baseColor;
}

void main()
{
    ivec2 dimensions = imageSize(renderTarget);
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    if (coords.x >= dimensions.x || coords.y >= dimensions.y)
        return;

    uint state = coords.x + coords.y * dimensions.x;    
    vec4 color = vec4(0.0);

    float antiAliasingIterations = 8.0;
    for (int i = 0; i < antiAliasingIterations; i++)
    {
        vec2 uv = vec2(coords + RandomVector2(state)) / dimensions;
        Ray ray = createCameraRayFromUV(uv);
        color += fireRay(ray);
    }

    imageStore(renderTarget, coords, color / antiAliasingIterations);
}