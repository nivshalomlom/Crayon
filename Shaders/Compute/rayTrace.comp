#version 430 core

#include "./Rays/ray_trace.comp"
#define MAX_TEMPORAL_ITEMS 30

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uniform ivec2 dimensions;

void HandleRayHit(inout Reservoir reservoir, uint kernal_ID, Ray ray, RayHit rayHit, inout uint state)
{
    Material material = rayHit.material;
    vec3 normal = rayHit.impact.normal;
    vec3 emission = Emission(material);

    BRDFPoint point = CreateBRDFPoint(-ray.direction, vec3(0), normal);
    Ray reflected = CreateRay(rayHit.impact.point, vec3(0));

    Impact impact;
    for (int i = 0; i < raysPerPixel; i++)
    {
        uint seedState = state;

        point.lightDirection = normalize(rayHit.impact.normal + RandomDirection(state));
        reflected.direction = point.lightDirection + normal * 0.0001;

        vec3 incomingLight = Trace(reflected, rayBounces, impact, state);
        vec3 outgoingLight = incomingLight * BRDF(point, material) + emission;

        float weight = length(outgoingLight) / RandomDirectionPDF(reflected.direction, normal);
        bool accepted = AddToReservoir(reservoir, vec4(outgoingLight, 1.0), weight, state);

        if (accepted)
            reservoirsHitInfo[kernal_ID].samplePoint = vec4(impact.point, 1.0);
    }

    reservoirsHitInfo[kernal_ID].normalDepth = vec4(normal, distance(ray.origin, rayHit.impact.point));
}

Reservoir SampleLight(ivec2 coords, uint kernal_ID, inout uint state)
{
    Reservoir reservoir = CreateReservoir(state);

    vec2 uv = vec2(coords + RandomVector2(state)) / dimensions;
    Ray ray = CreateCameraRayFromUV(uv);

    RayHit rayHit;
    if (FireRay(ray, rayHit))
    {
        HandleRayHit(reservoir, kernal_ID, ray, rayHit, state);
        reservoirsHitInfo[kernal_ID].impactPoint = vec4(rayHit.impact.point, 1.0);
    }
    else
    {
        vec4 incomingLight = vec4(EnvironmentLight(ray.direction), 1.0);
        float weight = dot(incomingLight, incomingLight);

        reservoirsHitInfo[kernal_ID].normalDepth = vec4(0, 0, 0, -1);
        AddToReservoir(reservoir, incomingLight, weight, state);
    }

    return reservoir;
}

void HandleRetrace(ivec2 coords, uint kernal_ID, uint prevState, inout uint state)
{
    Reservoir reservoir = SampleLight(coords, kernal_ID, prevState);
    vec4 diff = abs(temporalReservoirs[kernal_ID].item - reservoir.item);

    if (diff.x >= 5 || diff.y >= 5 || diff.z >= 5)
        temporalReservoirs[kernal_ID] = reservoir;
    else
        AddToReservoir(temporalReservoirs[kernal_ID], reservoir.item, reservoir.itemWeight, state, MAX_TEMPORAL_ITEMS, reservoir.state);
}

void HandleTemporalUpdate(ivec2 coords, uint kernal_ID, inout uint state)
{
    Reservoir reservoir = SampleLight(coords, kernal_ID, state);
    if (reservoirsHitInfo[kernal_ID].normalDepth.w < 0)
        temporalReservoirs[kernal_ID] = reservoir;
    else
        AddToReservoir(temporalReservoirs[kernal_ID], reservoir.item, reservoir.itemWeight, state, MAX_TEMPORAL_ITEMS, reservoir.state);
}

void main()
{
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    if (coords.x >= dimensions.x || coords.y >= dimensions.y)
        return;

    uint kernal_ID = coords.x + coords.y * dimensions.x;
    uint state = GenerateInitialFrameState(kernal_ID);

    if (Camera.frameCounter % 6 == 1)
        HandleRetrace(coords, kernal_ID, temporalReservoirs[kernal_ID].state, state);
    else
        HandleTemporalUpdate(coords, kernal_ID, state);

    spatialReservoirs[kernal_ID] = temporalReservoirs[kernal_ID];
}