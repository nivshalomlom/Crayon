#version 430 core

#include "./Rays/ray_intersections.comp"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(rgba32F, binding = 0) uniform image2D renderTarget;

void main()
{
    ivec2 dimensions = imageSize(renderTarget);
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    if (coords.x >= dimensions.x || coords.y >= dimensions.y)
        return;

    uint state = coords.x + coords.y * dimensions.x;    
    vec4 color = vec4(0.0);

    float antiAliasingIterations = 8.0;
    RayHit hit;

    for (int i = 0; i < antiAliasingIterations; i++)
    {
        vec2 uv = vec2(coords + RandomVector2(state)) / dimensions;
        Ray ray = CreateCameraRayFromUV(uv);

        if (FireRay(ray, hit))
            color += hit.material.baseColor;
    }

    imageStore(renderTarget, coords, color / antiAliasingIterations);
}