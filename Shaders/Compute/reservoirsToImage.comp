#version 430 core

#include "./Utility/constants.comp"
#include "./Geometry/transform.comp"
#include "./Rays/ray.comp"
#include "./Buffers/reservoir.comp"
#include "./Buffers/camera.comp"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(rgba32F, binding = 0) uniform image2D renderTarget;

bool SpatialReuse(ivec2 coords, ivec2 dimensions, ivec2 searchRadius, uint kernal_ID, inout uint state)
{
    uint maxIterations = 3;
    if (spatialReservoirs[kernal_ID].numItems < 250)
        maxIterations = 9;

    bool foundReuse = false;
    while (maxIterations-- > 0)
    {
        ivec2 neighborCoords = ivec2(
            RandomValue(max(coords.x - searchRadius.x, 0), min(coords.x + searchRadius.x, dimensions.x), state), 
            RandomValue(max(coords.y - searchRadius.y, 0), min(coords.y + searchRadius.y, dimensions.y), state)
        );

        uint neighbor_ID = neighborCoords.x + neighborCoords.y * dimensions.x;
        if (temporalReservoirs[neighbor_ID].itemWeight <= EPS || IsSkyHit(neighbor_ID))
            continue;

        if (!CanInfoBeReused(kernal_ID, neighbor_ID))
            continue;

        foundReuse = true;
        MergeReservoirs(spatialReservoirs[kernal_ID], temporalReservoirs[kernal_ID], state);
    }

    return foundReuse;
}

void main()
{
    ivec2 dimensions = imageSize(renderTarget);
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    if (coords.x >= dimensions.x || coords.y >= dimensions.y)
        return;

    uint kernal_ID = coords.x + coords.y * dimensions.x;
    if (IsSkyHit(kernal_ID))
        spatialReservoirs[kernal_ID] = temporalReservoirs[kernal_ID];
    else
    {
        uint state = kernal_ID + Camera.frameCounter * 6647369;
        ivec2 searchRadius = ivec2(dimensions * 0.1);

        while (searchRadius.x >= 3 && searchRadius.y >= 3)
        {
            if (SpatialReuse(coords, dimensions, searchRadius, kernal_ID, state))
                break;

            searchRadius /= 2;
        }
    }

    imageStore(renderTarget, coords, GetReservoirValue(spatialReservoirs[kernal_ID]));
}
