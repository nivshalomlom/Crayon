#version 430 core

#include "./Buffers/reservoir.comp"
#include "./Buffers/camera.comp"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

uniform uint iteration;
uniform ivec2 dimensions;

const ivec2[8] neighborOffsets = {
    ivec2( 1,  1),
    ivec2( 1,  0),
    ivec2( 1, -1),
    ivec2( 0, -1),
    ivec2(-1, -1),
    ivec2(-1,  0),
    ivec2(-1,  1),
    ivec2( 0,  1)
}; 

bool CannotSampleFrom(int kernal_ID, int neighbor_ID)
{
    if (neighbor_ID >= spatialReservoirs.length())
        return true;

    if (spatialReservoirs[neighbor_ID].itemWeight <= EPS || IsSkyHit(neighbor_ID))
        return true;

    if (!CanInfoBeReused(kernal_ID, neighbor_ID))
        return true;

    return false;
}

void main()
{
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
    if (coords.x >= dimensions.x || coords.y >= dimensions.y)
        return;

    uint kernal_ID = coords.x + coords.y * dimensions.x;
    uint state = kernal_ID + Camera.frameCounter * 6647369;

    Reservoir result = spatialReservoirs[kernal_ID];
    uint coefficient = pow(3, iteration);

    for (uint i = 0; i < neighborOffsets.length(); i++)
    {
        ivec2 neighborCoords = neighborOffsets[i] * coefficient + coords;
        uint neighbor_ID = neighborCoords.x + neighborCoords.y * dimensions.x;

        if (CannotSampleFrom(kernal_ID, neighbor_ID))
            continue;

        MergeReservoirs(result, spatialReservoirs[neighbor_ID], state);
    }

    spatialReservoirs[kernal_ID] = result;
}