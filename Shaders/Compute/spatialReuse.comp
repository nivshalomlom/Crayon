#version 430 core

#include "./Rays/ray_intersections.comp"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

const ivec2 offsets[8] = {
    ivec2( 1,  0),
    ivec2(-1,  0),
    ivec2( 0,  1),
    ivec2( 0, -1),
    ivec2( 1, -1),
    ivec2(-1,  1),
    ivec2(-1, -1),
    ivec2( 1,  1)
};

uniform ivec2 dimensions;
uniform int samplingDistance;

bool IsObstructed(uint from_id, uint to_id)
{
    vec3 origin = reservoirsHitInfo[from_id].impactPoint.xyz;
    vec3 target = reservoirsHitInfo[from_id].samplePoint.xyz;

    Ray ray = CreateRay(
        origin,
        normalize(target - origin)
    );

    RayHit rayHit;
    return FireRay(ray, rayHit);
}

void SpatialReuse(inout Reservoir reservoir, uint kernal_ID, ivec2 coords, ReservoirHitInfo hitInfo, inout uint state)
{
    for (int i = 0; i < numNeighborsToPick; i++)
    {
        uint index = uint(RandomValue(state) * offsets.length());
        ivec2 neighbor = coords + samplingDistance * offsets[index];
        uint neighbor_ID = neighbor.x + neighbor.y * dimensions.x;
        
        if (neighbor_ID >= spatialReservoirs.length())
            continue;

        float neighborDepth = reservoirsHitInfo[neighbor_ID].normalDepth.w;
        if (neighborDepth < 0 || abs(hitInfo.normalDepth.w - neighborDepth) > 0.05)
            continue;

        if (dot(hitInfo.normalDepth.xyz, reservoirsHitInfo[neighbor_ID].normalDepth.xyz) < 0.906)
            continue;

        float weight = spatialReservoirs[neighbor_ID].itemWeight;
        if (IsObstructed(kernal_ID, neighbor_ID))
            weight = 0;

        MergeReservoirs(reservoir, spatialReservoirs[neighbor_ID], weight, state);
    }
}

void main()
{
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    if (coords.x >= dimensions.x || coords.y >= dimensions.y)
        return;

    uint kernal_ID = coords.x + coords.y * dimensions.x;
    uint state = kernal_ID + Camera.frameCounter * 6647369;

    ReservoirHitInfo hitInfo = reservoirsHitInfo[kernal_ID];
    float depth = hitInfo.normalDepth.w;
    
    if (depth < 0)
        return;
    
    Reservoir spatialReservoir = spatialReservoirs[kernal_ID];
    SpatialReuse(spatialReservoir, kernal_ID, coords, hitInfo, state);

    barrier();
    spatialReservoirs[kernal_ID] = spatialReservoir;
}