#version 430 core

#include "./Utility/constants.comp"
#include "./Geometry/transform.comp"
#include "./Rays/ray.comp"
#include "./Buffers/reservoir.comp"
#include "./Buffers/camera.comp"

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

const ivec2 offsets[8] = {
    ivec2( 1,  0),
    ivec2(-1,  0),
    ivec2( 0,  1),
    ivec2( 0, -1),
    ivec2( 1, -1),
    ivec2(-1,  1),
    ivec2(-1, -1),
    ivec2( 1,  1)
};

uniform ivec2 dimensions;
uniform int samplingDistance;

void SpatialReuse(inout Reservoir reservoir, ivec2 coords, ReservoirHitInfo hitInfo, inout uint state)
{
    for (int i = 0; i < offsets.length(); i++)
    {
        if (RandomValue(state) < 0.5)
            continue;

        ivec2 neighbor = coords + samplingDistance * offsets[i];
        uint neighbor_ID = neighbor.x + neighbor.y * dimensions.x;
        
        if (neighbor_ID >= spatialReservoirs.length())
            continue;

        float neighborDepth = reservoirsHitInfo[neighbor_ID].normalDepth.w;
        if (neighborDepth < 0 || abs(hitInfo.normalDepth.w - neighborDepth) > 0.05)
            continue;

        if (dot(hitInfo.normalDepth.xyz, reservoirsHitInfo[neighbor_ID].normalDepth.xyz) < 0.906)
            continue;

        float weight = spatialReservoirs[neighbor_ID].itemWeight;
        MergeReservoirs(reservoir, spatialReservoirs[neighbor_ID], weight, state);
    }
}

void main()
{
    ivec2 coords = ivec2(gl_GlobalInvocationID.xy);

    if (coords.x >= dimensions.x || coords.y >= dimensions.y)
        return;

    uint kernal_ID = coords.x + coords.y * dimensions.x;
    uint state = kernal_ID + Camera.frameCounter * 6647369;

    ReservoirHitInfo hitInfo = reservoirsHitInfo[kernal_ID];
    float depth = hitInfo.normalDepth.w;
    
    if (depth < 0)
        return;
    
    Reservoir spatialReservoir = spatialReservoirs[kernal_ID];
    SpatialReuse(spatialReservoir, coords, hitInfo, state);

    barrier();
    spatialReservoirs[kernal_ID] = spatialReservoir;
}